1 - single calls
procedure p;
Select p such that Calls(_, p)
prepInterview, goInterview, acceptOffer, rejOffer
5000
2 - single calls
procedure p;
Select p such that Calls(p, _)
applyJob, goInterview
5000
3 - single calls with literal
procedure p;
Select p such that Calls(p, "goInterview")
applyJob
5000
4 - single with
procedure p;
Select p with p.procName = "dropOut"
dropOut
5000
5 - BOOLEAN with

Select BOOLEAN with 12 = 12
TRUE
5000
6 - single Calls*
procedure p;
Select p such that Calls*(p, "acceptOffer")
applyJob, goInterview
5000
7 - single Calls*
procedure p;
Select p such that Calls*("applyJob", p)
prepInterview, goInterview, acceptOffer, rejOffer
5000
8 - Single cross-procedure Modifies 
call c; variable v;
Select <c.procName> such that Modifies(c, v)
prepInterview, goInterview, acceptOffer, rejOffer
5000
9 - Single cross-procedure Modifies
procedure p;
Select p such that Modifies(p, "happy")
applyJob, goInterview
5000
10 - single cross-procedure Uses stmts
stmt s;
Select s such that Uses(s, "a")
1, 7
5000
11 - single cross-procedure Uses
procedure p;
Select <p.procName> such that Uses(p, "oops")
goInterview, applyJob
5000
12 -  single cross-procedure Modifies stmts
stmt s;
Select s such that Modifies(s, "salary")
2, 5, 18, 21, 16
5000
13 - single with to test for edge case
procedure p; call c;
Select p with p.procName = c.procName
acceptOffer,goInterview,prepInterview,rejOffer
5000
14 - single BOOLEAN
assign a;
Select BOOLEAN such that Uses(a, "good")
TRUE
5000
15 - Chaining meaningless query
assign a; stmt s; procedure p; variable v; if ifs;
Select s.stmt# such that Modifies(p, v) and Follows(a, _) pattern ifs ("answered",_,_) with a.stmt# = 6
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
5000
16 - Uses and Calls, tuple
procedure p; variable v;
Select <p, v> such that Calls(p, "rejOffer") and Uses(p, v)
goInterview greeting, goInterview questions, goInterview answered, goInterview good, goInterview oops, goInterview plan, goInterview examsComing, goInterview deadlineComing
5000
17 - Modifies and Calls, tuple
procedure p; variable v;
Select <p, v> such that Calls(p, "goInterview") such that Modifies(p,  v)
applyJob success, applyJob salary, applyJob study, applyJob research, applyJob interviewers, applyJob questions, applyJob good, applyJob leetCode, applyJob stress, applyJob happy, applyJob sad
5000
18 - cross-procedure Uses and Modifies
assign a; stmt s; procedure p;
Select s such that Uses(s, "examsComing") and Modifies(s, "salary")
2, 16
5000
19 - multiple Calls
procedure p, p1;
Select p such that Calls(p, _) and Calls(_, p) and Calls*(p, "rejOffer")
goInterview
5000
20 - Call + Modifies + assign pattern + with
procedure p; variable v; assign a;
Select <a, v> such that Calls(_, p) and Modifies(p, v) pattern a (v, _ "6 * (8 + 3)"_) with p.procName = "prepInterview"
6 study
5000
21 - pattern and UsesP
assign a; procedure p;
Select <p, a> pattern a (_, _"zzz"_) such that Uses(p, "z")
goSleep 28, goSleep 29, goSleep 30
5000
22 - BOOLEAN and with and Uses
call c; procedure p;
Select BOOLEAN such that Calls(c, _) and Uses(p, "z") with c.procName = p.procName
SemanticError
5000
23 - Chaining multiple query
while w; if ifs; procedure p; assign a; variable v;
Select <p, v> pattern w ("questions", _) such that Parent (w, ifs) pattern ifs (v, _,_) such that Uses(p, v) and Parent*(ifs, a) and Calls(_,p)
goInterview good, goInterview answered
5000
24 - Calls and Calls
procedure p;
Select p such that Calls(p, _) and Calls(_, p)
goInterview
5000
25 - all possible withs
procedure p; call cl, cl1; variable v; read r, r1; print pr, pr1; constant con; stmt s; while w; if ifs; assign a;
Select <p, cl, v, r, pr, con, s, r1, pr1, cl1, w, ifs, a> with p.procName = "rejOffer" and cl.procName = "rejOffer" and v.varName = "stress" and r.varName = "interviewers" and pr.varName = "greeting" and con.value = 1 and s.stmt# = 2 and r1.stmt# = 10 and pr1.stmt# = 14 and cl1.stmt# = 18 and w.stmt# = 11 and ifs.stmt# = 16 and a.stmt# = 19
rejOffer 20 stress 8 9 1 2 10 14 18 11 16 19
5000
26 - Select all procs that call another proc indirectly
procedure p, p1, p2;
Select <p, p2> such that Calls(p, p1) and Calls*(p1, p2)
applyJob acceptOffer, applyJob rejOffer
5000
27 - Select all procs that modify a variable indirectly
procedure p, p1; variable v;
Select p such that Calls*(p, p1) and Modifies(p1, v)
applyJob, goInterview
5000
28 - Select all procs that use a variable indirectly
procedure p, p1; variable v;
Select p such that Calls*(p, p1) and Uses(p1, v)
applyJob, goInterview
5000