1 - Basic: Select new entity: call
call c;
Select c
9, 14, 19
5000
2 - Basic: Select tuple with entity: procedure
procedure p; print pn;
Select <p, pn>
Voltron 2, Voltron 10, Voltron 11, Voltron 15, Voltron 17, Microtron 2, Microtron 10, Microtron 11, Microtron 15, Microtron 17, Megatron 2, Megatron 10, Megatron 11, Megatron 15, Megatron 17
5000
3 - Basic: Select BOOLEAN with true result
read r; print p;
Select BOOLEAN such that Follows(p, r)
TRUE
5000
4 - Basic: Select BOOLEAN with false result 
if i; while w;
Select BOOLEAN such that Parent*(i, w)
FALSE
5000
5 - Basic: Select BOOLEAN with semantically invalid query (wrong type)
while w; assign a;
Select BOOLEAN such that Uses(a, w)
SemanticError
5000
6 - Basic: Select BOOLEAN with semantically invalid query (duplicate synonym)
call c; procedure p; constant c;
Select BOOLEAN such that Calls(p, p)
SemanticError
5000
7 - Basic: Select BOOLEAN with semantically invalid query (undeclared synonym)
assign a; variable v;
Select BOOLEAN pattern a(v, _) such that Follows(a, b)
SemanticError
5000
8 - Basic: Select BOOLEAN with semantically invalid query (Uses _)
variable v; assign a;
Select BOOLEAN such that Uses(_, v)
SemanticError
5000
9 - Basic: Select BOOLEAN with semantically invalid query (Modifies _)
variable v; assign a;
Select BOOLEAN pattern a("x", _) such that Modifies(_, v)
SemanticError
5000
10 - Basic: Select BOOLEAN with semantically invalid query (wrong patterns)
if a;
Select BOOLEAN pattern a(_, _)
SemanticError
5000
11 - Basic: Select BOOLEAN with semantically invalid query (wrong patterns)
while a;
Select BOOLEAN pattern a(_, _, _)
SemanticError
5000
12 - Basic: Select BOOLEAN with semantically invalid query (wrong patterns)
assign a;
Select BOOLEAN pattern a(_, _, _)
SemanticError
5000
13 - Basic: Select BOOLEAN with semantically invalid query (wrong patterns)
while a;
Select BOOLEAN pattern a(_, _"x"_)
SemanticError
5000
14 - Basic: Select BOOLEAN with syntactically invalid query
if i;
Select BOOLEAN pattern i(_, _, _, _)
SyntaxError
5000
15 - Basic: UsesP
variable v;
Select v such that Uses("Microtron", v)
x, y, X
5000
16 - Basic: Uses with call
variable v;
Select v such that Uses(9, v)
X, x, y
5000
17 - Basic: Modifies with call (recursive)
variable v;
Select v such that Modifies(19, v)
x, y, z
5000
18 - Basic: ModifiesP
procedure p;
Select p such that Modifies(p, "y")
Microtron, Megatron
5000
19 - Basic: Assign pattern with subexpression
assign a; variable v;
Select <v, a> pattern a(v, _"(y * y) + x"_)
x 8
5000
19 - Basic: Assign pattern with subexpression
assign a; variable v;
Select <v, a> pattern a(v, _"x + 19"_)
y 7
5000
20 - Basic: Assign pattern with subexpression (wrong associativity)
assign a; variable v;
Select a pattern a(v, _"(2-X) / 100"_)
none
5000
21 - Basic: Assign pattern with full expression
assign a;
Select a pattern a(_, "y * y + x + 19")
8
5000
22 - Basic: Assign pattern with full expression
assign a;
Select a pattern a(_, "x - y")
13
5000
23 - Basic: Assign pattern with subexpression
assign a;
Select a pattern a(_, _"x - y"_)
13, 20
5000
24 - Basic: if pattern 
if hello; variable v;
Select v pattern hello(v, _, _)
x
5000
25 - Basic: while pattern (empty should exclude while with no vars in cond)
while w; variable v;
Select w pattern w(_, _)
16
5000
26 - Basic: while pattern
while w; variable v; constant c;
Select <v, w, c> pattern w(v, _)
x 16 49, x 16 3, x 16 2, x 16 100, x 16 19, x 16 10, x 16 20, y 16 49, y 16 3, y 16 2, y 16 100, y 16 19, y 16 10, y 16 20
5000
27 - Basic: Calls
procedure p1, p2;
Select p1 such that Calls(p1, p2)
Microtron, Megatron
5000
28 - Basic: Is called
procedure p1, p2;
Select p2 such that Calls(p1, p2)
Voltron, Microtron
5000
29 - Basic: Calls with boolean select (TRUE)

Select BOOLEAN such that Calls("Megatron", "Voltron")
TRUE
5000
30 - Basic: Calls with boolean select (FALSE)

Select BOOLEAN such that Calls("Voltron", _)
FALSE
5000
31 - Intermediate: BOOLEAN with nonempty result table
read r; print p; call cl;
Select BOOLEAN such that Follows(p, r) and Follows(r, cl)
TRUE
5000
32 - Intermediate: Multiple Calls
procedure p1, p2, p3;
Select p1 such that Calls(p1, p2) and Calls(p2, p3)
Megatron
5000
33 - Intermediate: Even more calls
procedure p1, p2, p3;
Select p2 such that Calls(p1, p2) and Calls(p2, p3) such that Calls(p1, p3)
Microtron
5000
34 - Intermediate: assign pattern x Uses x Modifies
assign a; variable v; stmt s1, s2;
Select <s1, s2> pattern a(v, _"x*x"_) such that Uses(s1, v) and Modifies(s2, v)
11 7, 4 7, 13 7, 8 7, 20 7, 9 7, 17 7, 20 16, 14 7, 13 16, 8 16, 11 16, 9 16, 1 7, 9 19, 4 16, 16 7, 8 19, 17 16, 19 16, 13 19, 6 16, 14 16, 12 16, 12 19, 1 19, 17 19, 4 19, 14 19, 6 19, 16 16, 16 19, 20 19, 1 16, 11 19, 6 7, 12 7, 19 19, 19 7
5000
35 - Intermediate: Uses x Modifies x Parent
stmt s1, s2; variable v;
Select <v, s1, s2> such that Parent(s1, s2) and Uses(s1, v) and Modifies(s2, v)
x 1 4, x 4 5, x 4 6, x 12 13, x 12 14, x 16 18, x 16 19, x 16 20, y 16 19
5000
36 - Intermediate: UsesP and Calls
procedure p; variable v;
Select v such that Uses(p, v) and Calls("Megatron", p) and Calls(p, _)
x, y, X
5000
37 - Advanced: 2 distinct groups with 2 clauses each
procedure p; variable v1, v2; assign a1, a2; print pn;
Select <pn, a2, p> pattern a1(v1, _"19"_) pattern a2(v2, _"x - y"_) such that Uses(pn, v1) and Modifies(p, v2)
17 13 Megatron, 17 13 Microtron, 11 13 Megatron, 10 20 Microtron, 11 13 Microtron, 10 20 Voltron, 10 20 Megatron, 10 13 Microtron, 10 13 Voltron, 17 20 Voltron, 10 13 Megatron, 11 13 Voltron, 11 20 Voltron, 17 13 Voltron, 17 20 Microtron, 11 20 Microtron, 11 20 Megatron, 17 20 Megatron
5000
38 - Advanced: Multiple interlinked clauses  
stmt s1, s2; if ifs; variable v; print pn;
Select <s2, s1> such that Parent*(s2, s1) and Parent(s2, pn) and Uses(pn, "X") and Parent*(ifs, s1) pattern ifs(v, _, _) such that Modifies(s1, v)
1 5, 1 6
5000
39 - Advanced: Weird pattern
call cl; assign a; stmt s;
Select cl pattern a("x", _"((x) - ((y)))"_) such that Parent(s, a) and Parent (s, cl) and Follows*(cl, a)
19
5000
40 - Advanced: not really
variable X; stmt s; assign a;
Select <s, a, X> such that Follows*(_, a) and Parent(s, a) such that Uses(a, X)
1 3 X, 16 20 x, 16 20 y
5000