1 - Basic: Select with assign pattern (partial match)
assign a; variable v;
Select a pattern a(v, _"22"_)
5, 9, 13
5000
2 - Basic: Select with assign pattern (exact match)
assign a; variable v;
Select a pattern a(v, "x + y")
8
5000
3 - Basic: Select with assign pattern (fail match)
assign a; variable v;
Select a pattern a(v, _"g + x + y"_)

5000
4 - Basic: Select with assign pattern (substring not subtree)
assign a; variable v;
Select a pattern a(v, _"6 + 22"_)

5000
5 - Basic: Select with assign pattern (exact substring partial match)
assign a; variable v;
Select a pattern a(v, _"a + b + g + d * c"_)
34
5000
6 - Basic: Select with while pattern (synonym)
while w; variable v;
Select w pattern w(v, _)
2, 17
5000
7 - Basic: Select with while pattern (wildcard)
while w;
Select w pattern w(_, _)
2, 17
5000
8 - Basic: Select with while pattern (literal)
while w;
Select w pattern w("15", _)
SyntaxError
5000
9 - Basic: Select with while pattern (non-existent literal)
while w;
Select w pattern w("nonexistent", _)

5000
10 - Basic: Select with if pattern (synonym)
if ifs; variable v;
Select ifs pattern ifs(v, _, _)
6, 19, 29
5000
11 - Basic: Select with if pattern (wildcard)
if ifs;
Select ifs pattern ifs(_, _, _)
6, 19, 29
5000
12 - Basic: Select with if pattern (literal)
if ifs;
Select ifs pattern ifs("z", _, _)
6
5000
13 - Basic: Select with if pattern (non-existent literal)
if ifs;
Select ifs pattern ifs("nonexistent", _, _)

5000
14 - Basic: Select BOOLEAN (relation exists)
stmt s;
Select BOOLEAN such that Modifies(s, "x")
TRUE
5000
15 - Basic: Select BOOLEAN (relation doesn't exist)
while w; read r;
Select BOOLEAN such that Follows(w, r)
FALSE
5000
16 - Basic: Select BOOLEAN (assign pattern exists)
assign a; variable v;
Select BOOLEAN pattern a(v, _"x * 8"_)
TRUE
5000
17 - Basic: Select BOOLEAN (assign pattern doesn't exist)
assign a; variable v;
Select BOOLEAN pattern a(v, "g")
FALSE
5000
18 - Basic: Select UsesP relation
procedure p; variable v;
Select p such that Uses(p, v)
Toyota, Mitsubishi, Suzuki, Dummy, Hyundai
5000
19 - Basic: Select ModifiesP relation
procedure p; variable v;
Select p such that Modifies(p, v)
Toyota, Mitsubishi, Suzuki, Hyundai
5000
20 - Basic: Select Uses relation (with call, semantically valid)
call c;
Select c such that Uses(c, "x")
12, 14, 24, 25, 39, 40
5000
21 - Basic: Select Uses relation (with call, semantically invalid)
call c;
Select c such that Uses(c, "invalidvariable")

5000
22 - Basic: Select Modifies relation (with call, semantically valid)
call c;
Select c such that Modifies(c, "g")
25, 40
5000
23 - Basic: Select Modifies relation (with call, semantically invalid)
call c;
Select c such that Modifies(c, "abc")

5000
24 - Basic: Select tuple (different entities)
while w; if ifs;
Select <w, ifs>
17 6, 17 19, 17 29, 2 6, 2 19, 2 29
5000
25 - Basic: Select tuple (same entities)
print pr;
Select <pr, pr> such that Uses(pr, "x")
4 4, 10 10, 23 23, 41 41
5000
26 - Basic: Select tuple (single entity)
assign a;
Select <a> such that Modifies(a, "x")
1, 13
5000
27 - Basic: Select tuple (multiple entities, one entity is empty)
call c; print pr; assign a; stmt s;
Select <c, a, pr, s> such that Modifies(a, "g") such that Modifies(a, "d")

5000
28 - Basic: Select Calls relation (literal)
procedure p;
Select p such that Calls(p, "Mitsubishi")
Hyundai, Suzuki
5000
29 - Basic: Select Calls relation (synonym)
procedure p1, p2;
Select p1 such that Calls(p1, p2)
Mitsubishi, Hyundai, Suzuki
5000
30 - Basic: Select Calls relation (wildcard)
procedure p;
Select p such that Calls(_, p)
Mitsubishi, Toyota
5000
31 - Intermediate: Select with two constraints (Calls* and assign-pattern)
procedure p; assign a;
Select <p, a> such that Calls*(p, _) pattern a("z", _"x + y"_)
Hyundai 8, Suzuki 8, Mitsubishi 8
5000
32 - Intermediate: Select with two constraints (Follows and while-pattern)
while w; print pr;
Select <w, pr> such that Follows*(w, pr) pattern w("x", _)
2 10, 2 11
5000
33 - Intermediate: Select with two constraints (Calls and UsesP)
procedure p1, p2; variable v;
Select <p1, p2> such that Calls(p1, p2) and Uses(p2, v)
Hyundai Mitsubishi, Suzuki Mitsubishi, Suzuki Toyota, Mitsubishi Toyota
5000
34 - Intermediate: Select with two constraints (ModifiesP and if-pattern)
procedure p; if ifs; variable v;
Select <p, v> such that Modifies(p, v) pattern ifs(v, _, _)
Suzuki c, Suzuki b, Suzuki a, Hyundai g, Suzuki g, Mitsubishi g, Hyundai z, Toyota z, Suzuki z, Mitsubishi z
5000
35 - Intermediate: Select with two constraints (UsesP and ModifiesP)
procedure p; variable v;
Select p such that Modifies (p, v) and Uses (p, v)
Mitsubishi, Hyundai, Suzuki, Toyota
5000
36 - Advanced: Select with many constraints #1
variable v; procedure p; if ifs;
Select <p, ifs> such that Modifies(p, v) and Uses(7, v) pattern ifs(v, _, _)
Suzuki 6, Hyundai 6, Mitsubishi 6, Toyota 6
5000
37 - Advanced: Select with many constraints #2
while w; print pr; read r;
Select <pr, r> such that Follows*(w, pr) pattern w(_, _)
23 37, 23 32, 11 37, 11 33, 11 3, 23 33, 23 3, 10 37, 11 32, 10 33, 10 32, 10 3
5000
38 - Advanced: Select with many constraints #3
assign a; variable v; while w; print pr; procedure p1, p2;
Select <p1, a> such that Uses(p1, v) and Uses(p2, v) and Calls*(p1, p2) pattern w(v, _) pattern a(v, _)
Mitsubishi 5, Hyundai 5, Suzuki 5, Suzuki 8, Mitsubishi 13, Mitsubishi 1, Hyundai 8, Hyundai 1, Mitsubishi 8, Suzuki 13, Hyundai 13, Suzuki 1
5000
39 - Advanced: Select with many constraints #4
procedure p; assign a; read r; print pr; if ifs; variable v;
Select <a, r, pr> such that Uses(pr, v) and Uses (p, v) and Modifies(a, v) and Follows*(pr, ifs) pattern a(v, _"22"_) 
13 37 4, 13 33 4, 13 32 4, 13 3 4
5000
40 - Advanced: Select with many constraints #5
procedure p1, p2; variable v; stmt s; assign a;
Select <s, v> such that Calls*(p1, p2) and Modifies(p1, v) and Uses(p2, v) and Modifies(s, v) and Follows(a, s)
19 g, 2 z, 6 z, 14 z, 2 y, 14 y, 14 x
5000
